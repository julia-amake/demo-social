{"version":3,"sources":["components/common/FormsControls/FormsControls.jsx","components/common/FormsControls/FormsControls.module.scss","utils/validators/validator.js","components/Login/Login.module.scss","components/Login/Login.jsx"],"names":["FormControl","input","meta","error","submitFailed","fieldType","props","className","s","formControl","React","createElement","errorMessage","Textarea","Input","createField","type","name","component","placeholder","validates","validate","module","exports","maxLength","required","value","undefined","maxLength300","length","email","test","LoginReduxForm","reduxForm","form","handleSubmit","captcha","onSubmit","invalid","src","alt","connect","state","isAuth","auth","login","logout","setCaptcha","formData","to","initialValue"],"mappings":"qQAIMA,EAAc,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,MAA6D,IAAtDC,KAAOC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAeC,EAAyB,EAAzBA,UAAcC,EAAW,4CAC/E,OACI,yBAAKC,UAAS,UAAKC,IAAEC,YAAP,YAAsBL,GAAgBI,IAAEL,QACjDO,IAAMC,cAAcN,EAApB,eAAmCJ,EAAnC,GAA6CK,IAC7CF,GAAgB,0BAAMG,UAAWC,IAAEI,cAAeT,KAKzDU,EAAW,SAACP,GAAD,OACb,kBAACN,EAAD,eAAaK,UAAU,YAAeC,KAEpCQ,EAAQ,SAACR,GAAD,OACV,kBAACN,EAAD,eAAaK,UAAU,SAAYC,KAEjCS,EAAc,SAACC,EAAMC,EAAMC,EAAWC,EAAaC,GACrD,OACI,+BACI,kBAAC,IAAD,CACIJ,KAAMA,EACNC,KAAMA,EACNC,UAAWA,EACXC,YAAaA,EACbE,SAAUD,O,oBC1B1BE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,aAAe,sC,iCCDvH,0GAEkBC,EAFZC,EAAW,SAAAC,GAAK,OAAKA,GAA0B,kBAAVA,OAAqBC,EAAY,qBAItEC,GAFYJ,EAEa,IAFA,SAAAE,GAAK,OAChCA,GAASA,EAAMG,OAASL,EAAxB,kBAA+CA,EAA/C,4BAAgFG,IAG9EG,EAAQ,SAAAJ,GAAK,OACfA,IAAU,4CAA4CK,KAAKL,GACrD,6BACAC,I,oBCRVL,EAAOC,QAAU,CAAC,MAAQ,uB,iCCD1B,yGA+CA,IAAMS,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAvBvB,YAAoD,IAAhCE,EAA+B,EAA/BA,aAAchC,EAAiB,EAAjBA,MAAOiC,EAAU,EAAVA,QAErC,OACI,0BAAMC,SAAUF,GACXpB,YAAY,OAAQ,QAASD,IAAO,SAAU,CAACW,IAAUK,MACzDf,YAAY,WAAY,WAAYD,IAAO,WAAY,CAACW,MACzD,+BACI,kBAAC,IAAD,CACIR,KAAK,aACLC,UAAWJ,IACXE,KAAK,aAJb,gBAOCb,GAASA,EAAMmC,SAAW,yBAAK/B,UAAWC,IAAEL,OAAQA,EAAMmC,SAC1DF,GAAW,yBAAK7B,UAAWC,IAAE4B,SAC1B,yBAAKG,IAAKH,EAASI,IAAI,KACtBzB,YAAY,OAAQ,UAAW,QAAS,KAAM,CAACU,OAEpD,4BAAQlB,UAAU,OAAlB,aAYGkC,uBALS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBP,QAASM,EAAME,KAAKR,WAKpB,CAACS,UAAOC,WAAQC,gBAFLN,EA7Cf,YAA+D,EAA/CO,SAAgD,IAAtCH,EAAqC,EAArCA,MAAOF,EAA8B,EAA9BA,OAAoBP,GAAU,EAAtBW,WAAsB,EAAVX,SAKjD,OAAIO,EAAe,kBAAC,IAAD,CAAUM,GAAG,aAG5B,oCACI,qCACA,kBAACjB,EAAD,CAAgBkB,aAAa,SAASd,QAASA,EAASC,SATtC,SAACW,GACvBH,EAAMG","file":"static/js/7.f9a3469a.chunk.js","sourcesContent":["import React from 'react';\nimport s from './FormsControls.module.scss';\nimport {Field} from 'redux-form';\n\nconst FormControl = ({input, meta: {error, submitFailed}, fieldType, ...props}) => {\n    return (\n        <div className={`${s.formControl} ${submitFailed && s.error}`}>\n            {React.createElement(fieldType, {...input, ...props})}\n            {submitFailed && <span className={s.errorMessage}>{error}</span>}\n        </div>\n    );\n};\n\nconst Textarea = (props) =>\n    <FormControl fieldType=\"textarea\" {...props}/>;\n\nconst Input = (props) =>\n    <FormControl fieldType=\"input\" {...props}/>;\n\nconst createField = (type, name, component, placeholder, validates) => {\n    return (\n        <label>\n            <Field\n                type={type}\n                name={name}\n                component={component}\n                placeholder={placeholder}\n                validate={validates}\n            />\n        </label>\n    );\n};\n\nexport {Textarea, Input, createField};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3IZ5A\",\"error\":\"FormsControls_error__1QSyu\",\"errorMessage\":\"FormsControls_errorMessage__2Lxl7\"};","const required = value => (value || typeof value === 'number' ? undefined : 'Field is Required');\n\nconst maxLength = maxLength => value =>\n    value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined;\nconst maxLength300 = maxLength(300);\n\nconst email = value =>\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\n        ? 'Invalid email address'\n        : undefined;\n\nexport {required, maxLength300, email};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__6SziI\"};","import React, {Component} from 'react';\nimport s from './Login.module.scss';\nimport {Field, reduxForm} from 'redux-form';\nimport {email, required} from '../../utils/validators/validator';\nimport {createField, Input} from '../common/FormsControls/FormsControls';\nimport {connect} from 'react-redux';\nimport {login, logout, setCaptcha} from '../../redux/auth-reducer';\nimport {Redirect} from 'react-router-dom';\n\nfunction Login({formData, login, isAuth, setCaptcha, captcha}) {\n    const handleSubmitLogin = (formData) => {\n        login(formData);\n    };\n\n    if (isAuth) return <Redirect to=\"/profile\"/>;\n\n    return (\n        <>\n            <h1>Login</h1>\n            <LoginReduxForm initialValue='hdjhjd' captcha={captcha} onSubmit={handleSubmitLogin}/>\n        </>\n    );\n}\n\nfunction LoginForm({handleSubmit, error, captcha}) {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField('text', 'email', Input, 'E-mail', [required, email])}\n            {createField('password', 'password', Input, 'Password', [required])}\n            <label>\n                <Field\n                    name=\"rememberMe\"\n                    component={Input}\n                    type=\"checkbox\"\n                /> Remember me\n            </label>\n            {error && error.invalid && <div className={s.error}>{error.invalid}</div>}\n            {captcha && <div className={s.captcha}>\n                <img src={captcha} alt=\"\"/>\n                {createField('text', 'captcha', 'input', null, [required])}\n            </div>}\n            <button className=\"btn\">Login</button>\n        </form>\n    );\n}\n\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n    captcha: state.auth.captcha\n});\n\nexport default connect(\n    mapStateToProps,\n    {login, logout, setCaptcha})\n(Login);"],"sourceRoot":""}